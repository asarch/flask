<?xml version='1.0' encoding='utf-8'?>

<article xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en'>

<info>
<author>
<firstname>Alef Sheridan Ariel</firstname>
<surname>Ramírez Chiñas</surname>
</author>

<revhistory>

<revision>
<date>Wed Apr 13 23:20:26 CDT 2016</date>
<revnumber>1.0</revnumber>
<revremark>Creación de la guía.</revremark>
<authorinitials>asarch</authorinitials>
</revision>

</revhistory>
</info>

<title>Guideliness for Flask-based applications</title>

<section>
<title>Estructura de la aplicación</title>

<screen><![CDATA[application/
    app.py
    model.py
    templates/
    static/]]></screen>

<para>Tambien puedes usar este esquema:</para>

<screen><![CDATA[application/
    app.py
    models/
    templates/
    static/]]></screen>
</section>

<section>
<title>Módulos necesarios</title>

<programlisting linenumbering="numbered" language="python"><![CDATA[# General modules
from flask import Flask
from flask import render_template
from flask import Response

# Optional modules
from flask import flash
from flask import session
from flask import redirect
from flask import url_for
from flask import request
from flask import abort
from flask import escape
from flask import request

# Admin module
from flask_admin import Admin

# SQLAlchemy integration modules
from flask_sqlalchemy import SQLAlchemy
from flask_admin.contrib.sqla import ModelView]]></programlisting>
</section>

<section>
<title>Configuración de la aplicación</title>

<programlisting linenumbering="numbered" language="python"><![CDATA[app = Flask(__name__)

# Se puede configurar la llave asi
app.config['SECRET_KEY'] = '...'

# O tambien asi:
app.secret_key = '...'

admin = Admin(app, name="AppName", template_mode="bootstrap3")

admin.add_view(ModelView(Table1, session))

@app.errorhandler(Exception)
def exception_handler(error):
    return repr(error)
    
if __name__ == '__main__':
	app.run(host='0.0.0.0', port=8784, debug=True)]]></programlisting>
</section>

<section>
<title>Controladores</title>

<programlisting linenumbering="numbered" language="html"><![CDATA[@app.route('/controller1')
def controller1():
    return render_template("controller1/index.html", records=session.query(Table1)[:15])

@app.routes('/controller1/add', methods=['GET', 'POST'])
def controller1_add():
    if request.method == 'POST':
        return "<h1>The record %s has been saved</h1>" % request.form['nombre']

    return render_template("controller1/add.html")

@app.route('/controller2/<name>')
def controller2(name=name):
    if name == None:
        return "<p>Hello world!</p>"
    else
        return "<p>Hello %s</p>" % name]]></programlisting>
</section>

<section>
<title>Plantillas</title>

<section>
<title>layout.html</title>

<programlisting linenumbering="numbered" language="html"><![CDATA[<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8"> 
<title>Server</title>
</head>
<body>
<div class="content">
{% block body %}
{% endblock %}
</div>
</body>
</html>]]></programlisting>
</section>

<section>
<title>index.html</title>

<programlisting linenumbering="numbered" language="python"><![CDATA[{% extends 'layout.html' %}
{% block body %}
<h1>Compradores</h1>

<table>
<thead>
<tr>
<th>id</th>
<th>Nombre</th>
<th>Apellido paterno</th>
<th>Apellido materno</th>
</tr>
</thead>
<tbody>
{% for comprador in compradores %}
<tr>
<td>{{ comprador.id }}</td>
<td>{{ comprador.nombre }}</td>
<td>{{ comprador.apellido_paterno }}</td>
<td>{{ comprador.apellido_materno }}</td>
</tr>
{% endfor %}
</tbody>
</table>
{% endblock %}]]></programlisting>
</section>
</section>

<section>
<title>Operaciones con SQLAlchemy</title>

<para>Módulos necesarios:</para>

<programlisting linenumbering="numbered" language="python"><![CDATA[from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine = create_engine('...')
Session = sessionmaker(bind=engine)
session = Session()]]></programlisting>

<para>Operaciones comunes:</para>

<programlisting linenumbering="numbered" language="python"><![CDATA[# Busqueda descendente
session.query(Table1).order_by(-Table1.id)

# Los ultimos 15 registros
session.query(Table1)[:15]

# Buscar un registro
session.query(Table1).filter(Table1.id == 10).one()

# Crear un registro
new_record = Table1(...)
session.add(new_record)
session.commit()

# Eliminar un registro
record = session.query(Table1).filter(Table1.id == 10).one()
session.delete(record)
session.commit()

# Actualizar un registro
record = session.query(Table1).filter(Table1.id == 10).one()
record.field1 = "new value"
session.commit()

# Otra forma de actualizar
session.query(Table1).filter(Table1.id == 10).update({"field1" : "new value"})
session.commit()

# Otra forma
stmt = Table1.update().values(Table1.field1 = "new value").where(Table1.id == 10)
session.execute(stmt)

# Paginacion
session.query(Table1).order_by(-Table1.id).slice(5, 3).all()

# O tambien
session.query(Table1).order_by(Table.id)[10:20]

# Crear las tablas
Base.metadata.create_all(engine)

# Numero de registros
session.query(Table1).count()]]></programlisting>
</section>
	
<section>
<title>Changing the response type</title>
	
<para>From:</para>
	
<screen>https://blog.miguelgrinberg.com/post/customizing-the-flask-response-class</screen>
	
<para>Per route</para>
	
<programlisting language="python" linenumbered="numering"><![CDATA[@app.route('/')
def index():
	...
	return render_template("data.json"), 201, {"Content-Type", "application/json"}]]></programlisting>

<para>Pmermanently in the application</para>
	
<programlisting language="python" linenumbering="numbered"><![CDATA[class MyResponse(Response):
	default_mimetype = "application/xhml+xml"

class MyFlask(Flask):
	response_class = MyResponse

app = MyFlask(__name__)

@app.route('/data')
def get_data():
	return render_template("index.xhtml")]]></programlisting>

<para>Template:</para>
<programlisting language="xhtml" linenumbering="numbered"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>XHTML Server with Flask!</title>
<body>
<h1>Hello, world!</h1>
</body>
</html>]]></programlisting>
</section>
</article>
